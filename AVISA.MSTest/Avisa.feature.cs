// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AVISA.MSTest
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Cadastrar horario do medicamento", new string[] {
            "cadastrar_horario_medicamento"}, Description="  Cadastrar o(s) horario(s) do(s) medicamento(s) com isso podemos identificar qua" +
        "is sao os medicamentos mais consumidos, qual e o publico alvo, se teve ou nao re" +
        "acao alergica.", SourceFile="AVISA.feature", SourceLine=2)]
    public partial class CadastrarHorarioDoMedicamentoFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "cadastrar_horario_medicamento"};
        
#line 1 "AVISA.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Cadastrar horario do medicamento", "  Cadastrar o(s) horario(s) do(s) medicamento(s) com isso podemos identificar qua" +
                    "is sao os medicamentos mais consumidos, qual e o publico alvo, se teve ou nao re" +
                    "acao alergica.", ProgrammingLanguage.CSharp, new string[] {
                        "cadastrar_horario_medicamento"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void UsuarioCadastraOHorarioDoMedicamento(string usuario, string senha, string tipoAcesso, string medicamento, string horario, string cuidador, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Usuario_cadastra_o_horario_do_medicamento"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Usuario cadastra o horario do medicamento", null, @__tags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given(string.Format("Que o Usuario autentica com {0} e {1} no AVISA como {2}", usuario, senha, tipoAcesso), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 9
    testRunner.When(string.Format("O Usuario precisa tomar o {0}", medicamento), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 10
    testRunner.Then(string.Format("O {0} do medicamento fica registrado", horario), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
#line 11
    testRunner.And(string.Format("O envia a notificacao para o {0}", cuidador), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Usuario cadastra o horario do medicamento, Variant 0", new string[] {
                "Usuario_cadastra_o_horario_do_medicamento"}, SourceLine=14)]
        public virtual void UsuarioCadastraOHorarioDoMedicamento_Variant0()
        {
#line 7
  this.UsuarioCadastraOHorarioDoMedicamento("\"usuario\"", "\"teste\"", "\"Usuario nao autorizado\"", "\"Anador\"", "\"08:00\"", "\"Fabio\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Usuario cadastra o horario do medicamento, Variant 1", new string[] {
                "Usuario_cadastra_o_horario_do_medicamento"}, SourceLine=14)]
        public virtual void UsuarioCadastraOHorarioDoMedicamento_Variant1()
        {
#line 7
  this.UsuarioCadastraOHorarioDoMedicamento("\"usuario\"", "\"senha\"", "\"Usuario autenticado\"", "\"Novalgina\"", "\"12:00\"", "\"Leandro\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Usuario cadastra o horario do medicamento, Variant 2", new string[] {
                "Usuario_cadastra_o_horario_do_medicamento"}, SourceLine=14)]
        public virtual void UsuarioCadastraOHorarioDoMedicamento_Variant2()
        {
#line 7
  this.UsuarioCadastraOHorarioDoMedicamento("\"usuario\"", "\"test\"", "\"Usuario nao autorizado\"", "\"Dipirona\"", "\"15:00\"", "\"Deryk\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Usuario cadastra o horario do medicamento, Variant 3", new string[] {
                "Usuario_cadastra_o_horario_do_medicamento"}, SourceLine=14)]
        public virtual void UsuarioCadastraOHorarioDoMedicamento_Variant3()
        {
#line 7
  this.UsuarioCadastraOHorarioDoMedicamento("\"usuario\"", "\"password\"", "\"Usuario nao autorizado\"", "\"Mucosolvan\"", "\"21:00\"", "\"Fabio\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Usuario cadastra o horario do medicamento, Variant 4", new string[] {
                "Usuario_cadastra_o_horario_do_medicamento"}, SourceLine=14)]
        public virtual void UsuarioCadastraOHorarioDoMedicamento_Variant4()
        {
#line 7
  this.UsuarioCadastraOHorarioDoMedicamento("\"usuario\"", "\"senha\"", "\"Usuario autenticado\"", "\"Aspirina\"", "\"11:55\"", "\"Deryk\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
